#pragma once
#ifndef BIOS_H
#define BIOS_H

#include <memory.h>
#include "stdbool.h"

//#include "dos3_3.h"
//#include "freedos.h"
#include "vc.h"
//#include "checkit.h"
//#include "DOS.h"
#include "cpu8086.h"
#include "disk.h"
#include "ports.h"
#if PICO_ON_DEVICE
#include "ps2.h"
#endif


#define CURX RAM[0x450]
#define CURY RAM[0x451]
int color = 7;

uint8_t VRAM[VRAM_SIZE << 10];

static void bios_putchar(const char c) {

    //printf("\033[%im%c", color, c);
    if (c == 0x0D) {
        CURX = 0;
        CURY++;
    } else if (c == 0x0A) {
        CURX = 0;
    } else if (c == 0x08 && CURX > 0) {
        CURX++;
        VRAM[/*0xB8000 + */(CURY * 160) + CURX * 2 + 0] = 32;
        VRAM[/*0xB8000 + */(CURY * 160) + CURX * 2 + 1] = color;
    } else {
        VRAM[/*0xB8000 + */(CURY * 160) + CURX * 2 + 0] = c & 0xFF;
        VRAM[/*0xB8000 + */(CURY * 160) + CURX * 2 + 1] = color;
        if (CURX == 79) {
            CURX = 0;
            CURY++;
        } else
            CURX++;
    }

    if (CURY == 25) {
        CURY = 24;

        memmove(VRAM/* + 0xB8000*/, VRAM /*+ 0xB8000*/ + 160, 80 * 25 * 2);
        for (int a = 0; a < 80; a++) {
            VRAM[/*0xB8000 + */24 * 160 + a * 2 + 0] = 32;
            VRAM[/*0xB8000 + */24 * 160 + a * 2 + 1] = color;

        }
    }
}

static void bios_putstr(const char *s) {
    while (*s)
        bios_putchar(*s++);
}

#define bios_printf(...)                    \
    do {                            \
        char _buf_[4096];                \
        snprintf(_buf_, sizeof(_buf_), __VA_ARGS__);    \
        bios_putstr(_buf_);                \
    } while (0)


static void kbd_set_mod0 ( int mask, int scan )
{
    if ((scan & 0x80))
        RAM[0x417] &= ~mask;
    else
        RAM[0x417] |= mask;
}

static const uint8_t scan2ascii[] = {
        //0    1     2      3     4     5     6     7     8    9     A      B     C    D     E     F
        0x00, 0x1B, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x2D, 0x3D, 0x08, 0x09,
        0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x75, 0x69, 0x6F, 0x70, 0x5B, 0x5D, 0x0D, 0x00, 0x61, 0x73,
        0x64, 0x66, 0x67, 0x68, 0x6A, 0x6B, 0x6C, 0x3B, 0x27, 0x60, 0x00, 0x5C, 0x7A, 0x78, 0x63, 0x76,
        0x62, 0x6E, 0x6D, 0x2C, 0x2E, 0x2F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x7F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00,


        0x00, 0x37, 0x2E, 0x20, 0x2F, 0x30, 0x31, 0x21, 0x32, 0x33, 0x34, 0x35, 0x22, 0x36, 0x38, 0x3E,
        0x11, 0x17, 0x05, 0x12,	0x14, 0x19, 0x15, 0x09,	0x0F, 0x10, 0x39, 0x3A,	0x3B, 0x84, 0x61, 0x13,
        0x04, 0x06, 0x07, 0x08,	0x0A, 0x0B, 0x0C, 0x3F,	0x40, 0x41, 0x82, 0x3C,	0x1A, 0x18, 0x03, 0x16,
        0x02, 0x0E, 0x0D, 0x42,	0x43, 0x44, 0x81, 0x3D,	0x88, 0x2D, 0xC0, 0x23,	0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2A, 0x2B,	0x2C, 0xA0, 0x90
#if 0
        0x00, 0x37, 0x2E, 0x20, 0x2F, 0x30, 0x31, 0x21, 0x32, 0x33, 0x34, 0x35, 0x22, 0x36, 0x38, 0x3E,
	0x11, 0x17, 0x05, 0x12,	0x14, 0x19, 0x15, 0x09,	0x0F, 0x10, 0x39, 0x3A,	0x3B, 0x84, 0x01, 0x13,
	0x04, 0x06, 0x07, 0x08,	0x0A, 0x0B, 0x0C, 0x3F,	0x40, 0x41, 0x82, 0x3C,	0x1A, 0x18, 0x03, 0x16,
	0x02, 0x0E, 0x0D, 0x42,	0x43, 0x44, 0x81, 0x3D,	0x88, 0x2D, 0xC0, 0x23,	0x24, 0x25, 0x26, 0x27,
	0x28, 0x29, 0x2A, 0x2B,	0x2C, 0xA0, 0x90
#endif
};

static int kbd_push_buffer ( uint16_t data )
{
    uint16_t buftail = peekw(0x41C);
    uint16_t buftail_adv = buftail + 2;
    if (buftail_adv == peekw(0x482))
        buftail_adv = peekw(0x480);
    if (buftail_adv == peekw(0x41A))
        return 1;		// buffer is full!
    pokew(0x400 + buftail, data);
    pokew(0x41C, buftail_adv);
    return 0;
}

static uint16_t kbd_get_buffer ( int to_remove )
{
    uint16_t bufhead = peekw(0x41A);
    if (bufhead == peekw(0x41C))
        return 0;	// no character is available in the buffer
    uint16_t data = peekw(0x400 + bufhead);
    if (!to_remove)
        return data;
    bufhead += 2;
    if (bufhead == peekw(0x482))
        pokew(0x41A, peekw(0x480));
    else
        pokew(0x41A, bufhead);
    return data;
}


// This is the IRQ handler for the keyboard interrupt of BIOS
static void bios_irq1_handler(void) {
    // keyboard
    //puts("BIOS: IRQ1!\r\n");
    /* FIXME!! */
    //	if ((portram[0x64] & 2)) {	// is input buffer full
    //uint8_t scan = portram[0x60];	// read the scancode
    uint8_t scan = portin(0x60);
    uint8_t ctrlst = portin(0x61);
    portout(0x61, ctrlst | 0x80);
    portout(0x61, ctrlst);
    //portram[0x64] &= ~2;		// empty the buffer
    //printf("BIOS: scan got: %Xh\n", scan);
    switch (scan & 0x7F) {
        case 0x36: kbd_set_mod0(0x01, scan); break;	// rshift
        case 0x2A: kbd_set_mod0(0x02, scan); break;	// lshift
        case 0x1D: kbd_set_mod0(0x04, scan); break;	// ctrl
        case 0x38: kbd_set_mod0(0x08, scan); break;	// alt
        case 0x46: kbd_set_mod0(0x10, scan); break;	// scroll lock
        case 0x45: kbd_set_mod0(0x20, scan); break;	// num lock
        case 0x3A: kbd_set_mod0(0x40, scan); break;	// caps lock
        case 0x52: kbd_set_mod0(0x80, scan); break;	// ins
        default:
            if (scan < 0x80) {
                uint8_t ascii;
                if (scan <= sizeof(scan2ascii))
                    ascii = scan2ascii[scan];
                else
                    ascii = 0;
                if ((RAM[0x417] & 3)) {
                    if (ascii == ';')
                        ascii = ':';
                }
                kbd_push_buffer(ascii | (scan << 8));
            }
            break;
    }
    //	}
    portout(0x20, 0x20);	// send end-of-interrupt command to the interrupt controller
    /* */
}


int cpu_hlt_handler(void) {
    puts("BIOS: critical warning, HLT outside of trap area?!\r\n");
    return 1;    // Yes, it was really a halt, since it does not fit into our trap area
}
static const uint8_t charROM[2048]  = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0
        0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
        0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
        0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
        0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
        0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
        0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
        0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
        0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
        0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
        0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, // 10
        0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
        0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
        0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
        0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
        0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
        0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
        0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
        0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
        0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
        0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00, //20
        0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
        0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
        0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
        0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
        0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
        0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
        0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
        0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
        0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
        0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00, //30
        0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //32 [SPACE]
        0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
        0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
        0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
        0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
        0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
        0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,  //40
        0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
        0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
        0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
        0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
        0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
        0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
        0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
        0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,  //50
        0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
        0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
        0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
        0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
        0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
        0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
        0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
        0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
        0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
        0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,  //60
        0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
        0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
        0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
        0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
        0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
        0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
        0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
        0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
        0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
        0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,  //70
        0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
        0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
        0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
        0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
        0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
        0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
        0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
        0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
        0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
        0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,  //80
        0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
        0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
        0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
        0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
        0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
        0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
        0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
        0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
        0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
        0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,  //90
        0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
        0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
        0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
        0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
        0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
        0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
        0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,  //100
        0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
        0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
        0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
        0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
        0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
        0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
        0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
        0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
        0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
        0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,  //110
        0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
        0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
        0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
        0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
        0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
        0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
        0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
        0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
        0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,  //119
        0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,  //120
        0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
        0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
        0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
        0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
        0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
        0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
        0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
        0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
        0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,   //130
        0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
        0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
        0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
        0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
        0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
        0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
        0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
        0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
        0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
        0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,   //140
        0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
        0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
        0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
        0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
        0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
        0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
        0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
        0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
        0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
        0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,   //150
        0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
        0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
        0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
        0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
        0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
        0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
        0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
        0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
        0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
        0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,   //160
        0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
        0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
        0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
        0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
        0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
        0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
        0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
        0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
        0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,   //170
        0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
        0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
        0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
        0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
        0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
        0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
        0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
        0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,   //180
        0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
        0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
        0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
        0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
        0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
        0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
        0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
        0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
        0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
        0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,   //190
        0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
        0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
        0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
        0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
        0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,  //200
        0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
        0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
        0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
        0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
        0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
        0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
        0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, //210
        0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
        0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
        0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
        0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
        0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,   //220
        0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
        0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
        0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
        0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
        0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
        0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
        0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
        0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
        0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,   //230
        0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
        0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
        0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
        0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
        0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
        0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
        0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
        0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
        0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
        0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,   //240
        0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
        0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
        0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
        0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
        0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
        0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
        0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,  //250
        0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
        0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
        0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void CopyCharROM () {
    int k;
    for (k=0; k < 2048; k++) {
        VRAM[14336+k] = charROM[k];
    }
}

#if PICO_ON_DEVICE
#define PS2_KEYMAP_SIZE 136
typedef struct {
    uint8_t noshift[PS2_KEYMAP_SIZE];
    uint8_t shift[PS2_KEYMAP_SIZE];
    uint8_t uses_altgr;
    uint8_t altgr[PS2_KEYMAP_SIZE];
} PS2Keymap_t;

extern const PS2Keymap_t PS2Keymap_US;

const PS2Keymap_t PS2Keymap_US = {
        // without shift
        {0, 0x43, 0, 0x3F, 0x3D, 0x3B, 0x3C, 0 /*PS2_F12*/,
         0, 0x44, 0x42, 0x40, 0x3E, 0x0F, 0x29, 0,
         0, 0 /*Lalt*/, 0 /*Lshift*/, 0, 0 /*Lctrl*/, 0x10, 0x02, 0,
         0, 0, 0x2C, 0x1F, 0x1E, 0x11, 0x03, 0,
         0, 0x2E, 0x2D, 0x20, 0x12, 0x05, 0x04, 0,
         0, 0x39, 0x2F, 0x21, 0x14, 0x13, 0x06, 0,
         0, 0x31, 0x30, 0x23, 0x22, 0x15, 0x07, 0,
         0, 0, 0x32, 0x24, 0x16, 0x08, 0x09, 0,
         0, 0x33, 0x25, 0x17, 0x18, 0x0B, 0x0A, 0,
         0, 0x34, 0x35, 0x26, 0x27, 0x19, 0x0C, 0,
         0, 0, 0x28, 0, 0x1A, 0x0D, 0, 0,
         0 /*CapsLock*/, 0 /*Rshift*/, 0x1C, 0x1B, 0, 0x2B, 0, 0,
         0, 0, 0, 0, 0, 0, 0x0E, 0,
         0, 0xcf /*Gray 1*/, 0, 0xcb /*Gray 4*/, 0xc7 /*Gray 7*/, 0, 0, 0,
         0xd2 /*Gray 0*/, 0x34, 0xd0 /*Gray 2*/, 0xcc /*Gray 5*/, 0xcd /*Gray 6*/, 0xc8 /*Gray 8*/, 0x01, 0 /*NumLock*/,
         0 /*PS2_F11*/, 0x4E, 0xd1 /*Gray 3*/, 0x4A, 0x37, 0xc9 /*Gray 9*/, 0 /*PS2_SCROLL*/, 0,
         0, 0, 0, 0x41},

        // with shift
        {0, 0x5C, 0, 0x58, 0x56, 0x54, 0x55, 0 /*PS2_F12*/,
         0, 0x5D, 0x5B, 0x59, 0x57, 0x0F, 0x29, 0,
         0, 0 /*Lalt*/, 0 /*Lshift*/, 0, 0 /*Lctrl*/, 0x10, 0x02, 0,
         0, 0, 0x2C, 0x1F, 0x1E, 0x11, 0x03, 0,
         0, 0x2E, 0x2D, 0x20, 0x12, 0x05, 0x04, 0,
         0, 0x39 /*sh+space*/, 0x2F, 0x21, 0x14, 0x13, 0x06, 0,
         0, 0x31, 0x30, 0x23, 0x22, 0x15, 0x07, 0,
         0, 0, 0x32, 0x24, 0x16, 0x08, 0x09, 0,
         0, 0x33, 0x25, 0x17, 0x18, 0x0B, 0x0A, 0,
         0, 0x34, 0x35, 0x26, 0x27, 0x19, 0x0C, 0,
         0, 0, 0x28, 0, 0x1A, 0x0D, 0, 0,
         0 /*CapsLock*/, 0 /*Rshift*/, 0x1C /*Enter*/, 0x1B, 0, 0x2B, 0, 0,
         0, 0, 0, 0, 0, 0, 0x0E, 0,
         0, '1', 0, '4', '7', 0, 0, 0,
         '0', '.', '2', '5', '6', '8', 0x01, 0 /*NumLock*/,
         0 /*PS2_F11*/, 0x0D, '3', 0x0C, 0x37, '9', 0 /*PS2_SCROLL*/, 0,
         0, 0, 0, 0x5A },
        0
};
#define BREAK     0x01
#define MODIFIER  0x02
#define SHIFT_L   0x04
#define SHIFT_R   0x08
#define ALTGR     0x10
#define CTRL      0x20


static char get_scancode(void) {
    static uint8_t state=0;
    uint8_t s;
    char c;

    while (1) {
        s = get_scan_code();
        if (!s) return 0;
        if (s == 0xF0) {
            state |= BREAK;
            return 0x80;                      // retrun break??
        } else if (s == 0xE0) {
            state |= MODIFIER;
        } else {
            if (state & BREAK) {
                if (s == 0x12) {                    ///0x12 is left shift key pressed
                    state &= ~SHIFT_L;
                } else if (s == 0x59) {
                    state &= ~SHIFT_R;                /// 0x59 is right shift
                } else if (s == 0x14) {             /// 0x14 is ctrl key pressed
                    state &= ~CTRL;
                } else if (s == 0x11) {             ///0x11 is alt key pressed
                    state &= ~ALTGR;
                }
                state &= ~(BREAK | MODIFIER);
                continue;
            }
            if (s == 0x12) {
                state |= SHIFT_L;
                continue;
            } else if (s == 0x59) {
                state |= SHIFT_R;
                continue;
            } else if (s == 0x14) {
                state |= CTRL;
                continue;
            } else if (s == 0x11) {
                state |= ALTGR;
                continue;
            }
            c = 0;
            if (state & MODIFIER) {
                switch (s) {
                    case 0x70: c = 0x52; break;
                    case 0x6C: c = 0x47; break;
                    case 0x7D: c = 0x49; break;
                    case 0x71: c = 0x53; break;
                    case 0x69: c = 0x4F; break;
                    case 0x7A: c = 0x51; break;
                    case 0x75: c = 0x48; break;
                    case 0x6B: c = 0x4B; break;
                    case 0x72: c = 0x50; break;
                    case 0x74: c = 0x4D; break;
                    case 0x4A: c = 0x35; break;
                    case 0x5A: c = 0x1C; break;
                    default: break;
                }
            } else if (state & (SHIFT_L | SHIFT_R)) {
                if (s < PS2_KEYMAP_SIZE)
                    c = PS2Keymap_US.shift[s];
            } else {
                if (s < PS2_KEYMAP_SIZE)
                    c = PS2Keymap_US.noshift[s];
            }

            state &= ~(BREAK | MODIFIER);

            switch (state) {
                case 0x04: RAM[0x417]= 0x02; break;
                case 0x08: RAM[0x417]= 0x01; break;
                case 0x0c: RAM[0x417]= 0x03; break;
                case 0x10: RAM[0x417]= 0x08; break;
                case 0x14: RAM[0x417]= 0x0a; break;
                case 0x18: RAM[0x417]= 0x09; break;
                case 0x1c: RAM[0x417]= 0x0b; break;
                case 0x20: RAM[0x417]= 0x04; break;
                case 0x24: RAM[0x417]= 0x06; break;
                case 0x28: RAM[0x417]= 0x05; break;
                case 0x2c: RAM[0x417]= 0x07; break;
                case 0x30: RAM[0x417]= 0x0c; break;
                case 0x34: RAM[0x417]= 0x0e; break;
                case 0x38: RAM[0x417]= 0x0d; break;
                case 0x3c: RAM[0x417]= 0x0f; break;
                default:   RAM[0x417]= 0x00; break;
            }

            if ((c == 0x53) && (RAM[0x417]&0x0c)) {
                c =0x34;
            }

            if (c > 127) {
                c = c - 0x80;
                RAM[0x417] |= 0x20;
            }
            if (c) {
                portram[0x60] = c;
                return c;
            }
        }
    }
}

static uint8_t CharBuffer=0;
static uint8_t UTF8next=0;

static bool keyboard_available() {
    if (CharBuffer || UTF8next) return true;
    CharBuffer = get_scancode();
    if (CharBuffer) return true;
    return false;
}


int keyboard_read() {
    uint8_t result;

    result = UTF8next;
    if (result) {
        UTF8next = 0;
    } else {
        result = CharBuffer;
        if (result) {
            CharBuffer = 0;
        } else {
            result = get_scancode();
        }
    }
    if (!result) return -1;

    return result;
}
#endif
#endif